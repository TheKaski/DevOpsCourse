# Basic pipeline for the project.
image: ubuntu:20.04 # This works for now, however woulc be wise to try to choose a ready made image with as much ready tools installed in the first place

stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job: # This job runs in the build stage, which runs first with docker compose.
  stage: build
  before_script:
    - apt-get update && apt-get install -y docker.io docker-compose # Install Docker and Docker Compose
    - sudo systemctl start docker # Start the docker daemon
    - docker info
  script:
    - echo "Setting up environment with Docker Compose"
    - docker-compose -f docker-compose.yaml up -d # Start services in detached mode

api-test-job: # This job runs in the test stage.
  stage: test # It only starts when the job in the build stage completes successfully.
  before_script:
    - apt-get install -y python3 python3-pip # Install python for running the tests
    - pip3 install requests # Python dependency for testing the endpoints
  script:
    - echo "Running api tests..."
    - python3 scripts/api_tests.py # Try running the test script

lint-test-job: # This job also runs in the test stage.
  stage: test # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
