# Basic pipeline for the project.
stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

# Bind the Docker socket to access the host's Docker daemon
volumes:
  - /var/run/docker.sock:/var/run/docker.sock # This is crucial for the container to access the host's Docker daemon

build-job: # This job runs in the build stage, which runs first with docker compose.
  stage: build
  image: ubuntu:latest
  before_script:
    - apt-get update && apt-get install -y docker.io docker-compose sudo python3-requests python3-distutils # Install Docker and Docker Compose
    - docker info
  script:
    - echo "Setting up environment with Docker Compose"
    - docker-compose -f docker-compose.yaml up -d # Start services in detached mode

api-test-job: # This job runs in the test stage.
  image: ubuntu:latest
  stage: test # It only starts when the job in the build stage completes successfully.
  before_script:
    - sleep 10
    - docker-compose ps
    - curl http://127.0.0.1:8197
    - sleep 10
    - curl -i http://127.0.0.1:8197/state
  script:
    - echo "Running api tests..."
    - python3 tests/api_tests.py # Try running the test script

deploy-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
