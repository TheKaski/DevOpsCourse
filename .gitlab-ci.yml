# Basic pipeline for the project.
stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job: # This job runs in the build stage, which runs first with docker compose.
  stage: build
  image: docker:latest
  before_script:
    - docker info
    - docker-compose -v
  script:
    - echo "Setting up environment with Docker Compose"
    - docker-compose -f docker-compose.yaml up -d # Start services in detached mode

api-test-job: # This job runs in the test stage.
  image: docker:latest
  stage: test # It only starts when the job in the build stage completes successfully.
  before_script:
    - apk add --no-cache curl python3 py3-pip # Install curl for Alpine-based images (docker:latest uses Alpine)
    - python3 -m venv /tmp/venv # Create a virtual environment
    - . /tmp/venv/bin/activate # Activate the virtual environment
    - pip install requests # Install requests inside the virtual environment
    - sleep 10
    - docker-compose ps
    - DOCKER_HOST_IP=$(docker network inspect bridge --format '{{range .IPAM.Config}}{{.Gateway}}{{end}}')
    - curl http://$DOCKER_HOST_IP:8197
    - sleep 10
    - curl -i http://$DOCKER_HOST_IP:8197/state
  script:
    - . /tmp/venv/bin/activate # Ensure the virtual environment is active
    - echo "Running api tests..."
    - python3 tests/api_tests.py # Try running the test script

deploy-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
